#include <Adafruit_NeoPixel.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/e53eb1d7-6825-4312-bdc0-935d7bf0e762 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float luftfeutigkeit;
  float temperatur;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include <SHTSensor.h>
#include <M5Stack.h>
#define M5STACK_FIRE_NEO_NUM_LEDS 10   //Anzahl LEDS
#define M5STACK_FIRE_NEO_DATA_PIN 15


Adafruit_NeoPixel pixels = Adafruit_NeoPixel(M5STACK_FIRE_NEO_NUM_LEDS, M5STACK_FIRE_NEO_DATA_PIN, NEO_GRB + NEO_KHZ800);

SHTSensor sht;

int letzteTemperatur = 0;
int letzteLuftfeuchtigkeit = 0;
 
void setup() {
  M5.begin();
  Wire.begin();
  Serial.begin(9600);
  delay(1000);
  pixels.begin();
  pixels.clear();


  if (sht.init()) {
    Serial.print("init(): success\n");
  } else {
    Serial.print("init(): failed\n");
  }
  sht.setAccuracy(SHTSensor::SHT_ACCURACY_MEDIUM);

  M5.Lcd.setTextColor(BLUE);
  M5.Lcd.setTextSize(4);

 
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  

}
 
void loop() {
  ArduinoCloud.update();

  static int pixelNumber = 0;  // = random(0, M5STACK_FIRE_NEO_NUM_LEDS - 1);

  // Control NeoPixel color based on temperature
  if (sht.readSample()) {
    int aktuelleTemperatur = sht.getTemperature();

    if (aktuelleTemperatur <= 25) {
      // If temperature is below 25, set NeoPixel color to blue
      for (pixelNumber = 0; pixelNumber < 10; pixelNumber++) {
        pixels.setPixelColor(pixelNumber, pixels.Color(0, 0, 255));  // Blue color
        pixels.show();
        delay(100);
      }
    } else {
      // Otherwise, set NeoPixel color to red
      for (pixelNumber = 0; pixelNumber < 10; pixelNumber++) {
        pixels.setPixelColor(pixelNumber, pixels.Color(255, 0, 0));  // Red color
        pixels.show();
        delay(500);
      }
    }

    // Clear NeoPixels after displaying color
    pixels.clear();
    delay(1000);

    // Continue with your existing temperature and humidity display code
    int aktuelleLuftfeuchtigkeit = sht.getHumidity();

    if (letzteTemperatur != aktuelleTemperatur) {
      letzteTemperatur = aktuelleTemperatur;

      M5.Lcd.fillRect(250, 77, 50, 50, BLACK);

      M5.Lcd.setCursor(210, 77);
      M5.Lcd.print("T : ");
      M5.Lcd.setCursor(250, 77);
      M5.Lcd.print(letzteTemperatur);
    }

    if (letzteLuftfeuchtigkeit != aktuelleLuftfeuchtigkeit) {
      letzteLuftfeuchtigkeit = aktuelleLuftfeuchtigkeit;

      M5.Lcd.fillRect(250, 162, 50, 50, BLACK);

      M5.Lcd.setCursor(210, 162);
      M5.Lcd.print("L : ");
      M5.Lcd.setCursor(250, 162);
      M5.Lcd.print(letzteLuftfeuchtigkeit);
    }
  }
  /*ArduinoCloud.update();

  static int pixelNumber=0;       // = random(0, M5STACK_FIRE_NEO_NUM_LEDS - 1);

  for (pixelNumber = 0 ; pixelNumber<10; pixelNumber++) {
  pixels.setPixelColor(pixelNumber, pixels.Color(255,0, 0));
  pixels.show();
  delay(1000);
  }    
  pixels.clear();
  delay(1000);

  if(sht.readSample()) {
    int aktuelleTemperatur = sht.getTemperature();
    int aktuelleLuftfeuchtigkeit= sht.getHumidity();
    
    if(letzteTemperatur != aktuelleTemperatur) {
      letzteTemperatur= aktuelleTemperatur;
      
      M5.Lcd.fillRect(250, 77, 50, 50, BLACK);
      
      M5.Lcd.setCursor(210, 77);
      M5.Lcd.print("T : ");
      M5.Lcd.setCursor(250, 77);
      M5.Lcd.print(letzteTemperatur);
    }
    
      if(letzteLuftfeuchtigkeit != aktuelleLuftfeuchtigkeit) {
        letzteLuftfeuchtigkeit= aktuelleLuftfeuchtigkeit;
      
        M5.Lcd.fillRect(250, 162, 50, 50, BLACK);
      
        M5.Lcd.setCursor(210, 162);
        M5.Lcd.print("L : ");
        M5.Lcd.setCursor(250, 162);
        M5.Lcd.print(letzteLuftfeuchtigkeit);
    }
  }*/ 

  
}


/*
  Since Temperatur is READ_WRITE variable, onTemperaturChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperaturChange()  {
  // Add your code here to act upon Temperatur change
}

/*
  Since Luftfeutigkeit is READ_WRITE variable, onLuftfeutigkeitChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLuftfeutigkeitChange()  {
  // Add your code here to act upon Luftfeutigkeit change
}